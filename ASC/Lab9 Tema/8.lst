     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; 8) Se da un sir de dublucuvinte. Sa se obtina sirul format din octetii inferiori ai
    14                                      ;    cuvintelor superioare din elementele sirului de dublucuvinte care sunt palindrom in scrierea in baza 10.
    15                                      
    16 00000000 D1CD95497856341279-         s dd 4995CDD1h, 12345678h, 79h, 0Fh, 96B535h, 1h, 75BC371h 
    16 00000009 0000000F00000035B5-
    16 00000012 96000100000071C35B-
    16 0000001B 07                 
    17                                     ;s dd 1234554321, 305419896, 121, 15, 9876789, 1, 123454321
    18                                      ls equ ($ - s) / 4
    19                                      
    20 0000001C FF                          dbg1 db -1
    21 0000001D <res 00000007>              d resb ls
    22 00000024 FF                          dbg2 db -1
    23                                      
    24 00000025 00000000                    restul dd 0
    25 00000029 0A000000                    zece dd 10
    26                                  
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:     
    30 00000000 B907000000                      mov ecx, ls
    31 00000005 BE[00000000]                    mov esi, s
    32 0000000A BF[1D000000]                    mov edi, d
    33                                          
    34                                          repeat1:
    35 0000000F AD                                  lodsd ; eax = current
    36 00000010 89C5                                mov ebp, eax ; copia pt cmp final
    37 00000012 89C4                                mov esp, eax ; copia
    38 00000014 BB00000000                          mov ebx, 0 ; palindromul
    39                                              
    40                                              palindrom:
    41                                                  ;esp = esp / 10
    42 00000019 89E0                                    mov eax, esp
    43 0000001B BA00000000                              mov edx, 0 ; punem numarul pe qword pentru a realiza impartirea la 10. daca puneam doar pe
    44                                                             ; dword, catul ar fii dat overflow (ex: 1234554321/ 10 = 123455432 rest 1)
    45 00000020 F735[29000000]                          div dword[zece] ; edx:eax / 10 = eax(rest edx)
    46 00000026 8915[25000000]                          mov [restul], edx
    47 0000002C 89C4                                    mov esp, eax
    48                                                  
    49                                                  ;ebx = ebx * 10
    50 0000002E 89D8                                    mov eax, ebx
    51 00000030 F725[29000000]                          mul dword[zece] ; eax * 10 = edx:eax (edx va fi mereu 0, conteaza eax)
    52 00000036 89C3                                    mov ebx, eax
    53                                                  
    54                                                  ;ebx = ebx + rest
    55 00000038 031D[25000000]                          add ebx, [restul]   
    56 0000003E 83FC00                              cmp esp, 0
    57 00000041 75D6                                jne palindrom
    58                                              
    59 00000043 39EB                                cmp ebx, ebp
    60 00000045 7506                                jne endif1
    61                                                  ; octetii inferiori ai cuvintelor superioare
    62                                                  ; adica acestia: 0011 0000h 
    63 00000047 C1EB10                                  shr ebx, 16
    64 0000004A 88D8                                    mov al, bl
    65 0000004C AA                                      stosb
    66                                              endif1:
    67                                              
    68 0000004D E2C0                            loop repeat1
    69                                          
    70 0000004F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    71 00000051 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
