     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; 12) (a * d + e) / [c + h / (c - b)] = 104 / 46 = 2 rest12
    14                                  
    15 00000000 0A                          a db 10
    16 00000001 05                          b db 5
    17 00000002 06                          c db 6
    18 00000003 08                          d db 8
    19 00000004 1800                        e dw 24
    20 00000006 2800                        h dw 40
    21                                      
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          
    26 00000000 A0[00000000]                    mov al, [a] ; al = a
    27 00000005 F625[03000000]                  mul byte[d] ; ax = al * d = a * d
    28 0000000B 660305[04000000]                add ax, [e] ; ax = a * d + e
    29 00000012 6689C3                          mov bx, ax  ; bx = ax = a * d + e
    30 00000015 8A0D[02000000]                  mov cl, [c] ; cl = c
    31 0000001B 2A0D[01000000]                  sub cl, [b] ; cl = c - b
    32 00000021 66A1[06000000]                  mov ax, [h] ; ax = h
    33 00000027 F6F1                            div cl ; ax / cl = h / (c - b) => al = cat, ah = rest
    34 00000029 0205[02000000]                  add al, [c] ; al = c + h / (c - b)
    35 0000002F 88C1                            mov cl, al ; cl = al = c + h / (c - b)
    36 00000031 6689D8                          mov ax, bx ; ax = bx = a * d + e
    37 00000034 F6F1                            div cl ; ax / cl = (a * d + e) / [c + h / (c - b)] => al = cat, ah = rest
    38                                      
    39                                          ; exit(0)
    40 00000036 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    41 00000038 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
