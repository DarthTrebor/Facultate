     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 0201FD03FC0206              a db 2, 1, -3, 3, -4, 2, 6
    14                                      la equ $ - a
    15 00000007 040507060201                b db 4, 5, 7, 6, 2, 1
    16                                      lb equ $ - b
    17 0000000D <res 0000000D>              r resb la + lb
    18                                  
    19                                  ; Se dau 2 siruri de octeti A si B. Sa se construiasca sirul R care sa contina elementele lui B in ordine inversa urmate de elementele negative ale lui A
    20                                  segment code use32 class=code
    21                                      start:
    22 00000000 B906000000                      mov ecx, lb
    23 00000005 BE05000000                      mov esi, lb - 1
    24 0000000A BF00000000                      mov edi, 0
    25                                          repeta1:
    26 0000000F 8A86[07000000]                      mov al, [b + esi]
    27 00000015 8887[0D000000]                      mov [r + edi], al
    28 0000001B 4E                                  dec esi
    29 0000001C 47                                  inc edi
    30 0000001D E2F0                            loop repeta1
    31                                          
    32 0000001F B907000000                      mov ecx, la
    33 00000024 BE00000000                      mov esi, 0
    34                                          repeta2:
    35 00000029 8A86[00000000]                      mov al, [a + esi]
    36 0000002F 3C00                                cmp al, 0
    37 00000031 7C02                                jl salveaza
    38 00000033 7D0A                                jge next
    39                                              salveaza:
    40 00000035 8887[0D000000]                          mov [r + edi], al
    41 0000003B 47                                      inc edi
    42 0000003C 46                                      inc esi
    43 0000003D EB01                                    jmp myendif
    44                                              next:
    45 0000003F 46                                      inc esi
    46                                                  myendif:
    47 00000040 E2E7                            loop repeta2
    48                                          
    49                                          
    50                                          
    51 00000042 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    52 00000044 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
